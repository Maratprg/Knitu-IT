Git Review

В GIT система контроля версий устроена следующим образом.
Локальные изменения -> индексация -> commit или загрузка в репозиторий.
После локальных изменений в текущем проекте с активизированным гит еще ничего не
происходит. Сохранение работает. Но для обработки в Git необходимо проиндексировать
или пометить измененные файлы. Затем вызвать commite загрузку, или точнее запаковку
в репозиторий.
Механизм утилиты упакует все содержимое разложив на детальные файлы и создаст
дерево проекта. Каждый при таких изменениях деревья будут создаваться вновь. Но сам
проект при этом можно будет в любой момент откатить к прежнему дереву.
Все это происходит в локальной папке специальной утилитой GIT. А вот
сама загрузка и выгрузка с сервиса GIThub происходит уже той же утилитой но
специальными командами. А не по умолчанию!

для работы с git hub удобнее использовать Power Shell с правами администратора
Навигация по P-Sh:
    cd DirName       - вход в директорию
    сd -Path..       - выход из текущей директории
    mkdir Name       - создание поддиректории в текущем каталоге
    Remove-Item Name - удаление чего либо в текущей дирректории

    cd C:\\...       - сдвиг по пути дирректории.

Попадание в VIM - стандартный редактор файла в этой среде.
Для выхода wq: или quit: или q:  и  enter. В этот редактор можно совершенно случайно попасть
при попытке создать коммит в одну строчку.

Проверка установленной версии git:
    git --version

Инициализация git:
Переходим в папку с проектом  -> git init
Это создаст скрытую папку .git с которой GIT работает. Он туда все и запаковывает а также отслеживает и записывает деревья.
Если удалить папку .git утилита GIT проигнорирует эту дирректорию и данные о струтуре версий утеряются.

Настройка P-Sh:
Глобальные имя пользователя и пароля.
    git config --global user.name "Name"
    git config --global user.name "email"

Проверка статуса и определение головы Head проекта.
    git status   - покажет голову которая указывает на текущее дерево, и отметит красным если файлы менял или удалил.
    git log      - проверка последних изменений.

Голову можно назначать на любое дерево в истории деревьев которые называются ветки brunch. Но сход с мастера череват.
    git checkout <branch>
    git checkout <commit hash>

Пройтись по хешированым данным дерева которое покажет что в описании этого хешфайла,  можно при помощи
    git cat-file -t <commit hash> тип файла в структуре дерева
    git cat-file -p <commit hash>

Создание новой отпочковывающейся ветки проекта.
    git brunch <brunch_name>
    git checkout -b <brunch_name> назначение новой ветки и одновременно переход головы на нее.

Merge или слияние веток проекта.
В определенный момент например если два разработчика шли на дописание отдельных модулей проекта
Возникла необходимость слияния двух веток. Важно в этот момент удаленные файлы могут быть утеряны.
Изменения копираются по принципу reciever - feuture. Если файл менялся одновременно у reciever и
у feature то после слияния веток останется тот что у reciever! Это важно!
Поэтому ветки сливают очень аккуратно. Как и само ведение новой ветви не должно затрогивать ядро
другой ветви. Иначе будет неопределенность.
    git merge <feauture branch>  - выполняется от лица reciever brunch.

Мирроринг или система синхронизации локального репозитория с серверной площадкой github.
Происходит по принципу local push -> remote, а обратно remote pull ->local.
Но для этого надо вообще чтобы репозиторий существовал.
Заходим на гит хаб заводим репозиторий заводим ключ и копируем http адрес.

Создаем origin репозитория. Оригинальная промежуточная(буферная) копия репозитория которая формирует сам
процесс взаимодействия через итернет.
    git remote   - текущий статус originov
    git remote add <originNAME> http:\...
    git push -u <originName> <branchMaster>   - выльет весь проект после последнего коммита на сервер.
    get pull   -  в текущей директории с гитом сольет все изменения в проекте с сервера на локаль.



